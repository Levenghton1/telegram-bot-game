import fetch from 'node-fetch';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(chatId, text, keyboard = null) {
  const BOT_TOKEN = process.env.BOT_TOKEN;
  const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  
  const data = {
    chat_id: chatId,
    text: text,
    parse_mode: 'Markdown'
  };

  if (keyboard) {
    data.reply_markup = keyboard;
  }

  try {
    const response = await fetch(TELEGRAM_API, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    return await response.json();
  } catch (error) {
    console.error('Error sending message:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getMainKeyboard() {
  return {
    inline_keyboard: [
      [{ text: "üéÆ –ò–≥—Ä–∞—Ç—å", web_app: { url: process.env.GAME_URL || "https://your-netlify-url.netlify.app" } }],
      [
        { text: "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤", callback_data: "leaderboard" },
        { text: "‚ùì –ö–∞–∫ –∏–≥—Ä–∞—Ç—å", callback_data: "how_to_play" }
      ]
    ]
  };
}

export async function handler(event) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' })
    };
  }

  try {
    const body = JSON.parse(event.body);
    console.log('Received update:', JSON.stringify(body));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (body.message && body.message.text) {
      const chatId = body.message.chat.id;
      const text = body.message.text;

      console.log('Processing message:', text, 'from chat:', chatId);

      switch(text) {
        case '/start':
          await sendTelegramMessage(
            chatId,
            "üê∑ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flying Pig Game!*\n\n" +
            "–ü–æ–º–æ–≥–∏ –Ω–∞—à–µ–π –º–∏–ª–æ–π —Å–≤–∏–Ω–∫–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≤—Å–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ –Ω–∞–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!\n\n" +
            "üéÆ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*\n" +
            "‚Ä¢ –ù–∞–∂–∏–º–∞–π –Ω–∞ —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —Å–≤–∏–Ω–∫–∞ –≤–∑–ª–µ—Ç–∞–ª–∞\n" +
            "‚Ä¢ –£–≤–æ—Ä–∞—á–∏–≤–∞–π—Å—è –æ—Ç –∫–∏—Ä–ø–∏—á–Ω—ã—Ö –∫–æ–ª–æ–Ω–Ω\n" +
            "‚Ä¢ –°–æ–±–∏—Ä–∞–π –æ—á–∫–∏ –∏ –ø–æ–±–µ–π —Ä–µ–∫–æ—Ä–¥!\n\n" +
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ò–≥—Ä–∞—Ç—å\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ",
            getMainKeyboard()
          );
          break;

        case '/help':
          await sendTelegramMessage(
            chatId,
            "‚ùì *–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ*\n\n" +
            "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
            "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É\n" +
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
            "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ\n" +
            "/top - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n\n" +
            "üéÆ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ:*\n" +
            "‚Ä¢ –ù–∞–∂–∏–º–∞–π –Ω–∞ —ç–∫—Ä–∞–Ω –¥–ª—è –ø—Ä—ã–∂–∫–∞\n" +
            "‚Ä¢ –£–¥–µ—Ä–∂–∏–≤–∞–π –¥–ª—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä—ã–∂–∫–∞\n" +
            "‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∂–∏–∑–Ω–µ–π\n\n" +
            "üí° *–°–æ–≤–µ—Ç—ã:*\n" +
            "‚Ä¢ –ù–µ –ª–µ—Ç–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ\n" +
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é\n" +
            "‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–ª–æ–Ω–Ω–æ–π",
            getMainKeyboard()
          );
          break;

        default:
          await sendTelegramMessage(
            chatId,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            getMainKeyboard()
          );
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    if (body.callback_query) {
      const callbackQuery = body.callback_query;
      const chatId = callbackQuery.message.chat.id;

      switch(callbackQuery.data) {
        case 'leaderboard':
          await sendTelegramMessage(
            chatId,
            "üèÜ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤*\n\n" +
            "1. ü•á Player1 - 1500\n" +
            "2. ü•à Player2 - 1200\n" +
            "3. ü•â Player3 - 1000\n" +
            "4. Player4 - 800\n" +
            "5. Player5 - 600\n\n" +
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–±–∏—Ç—å —ç—Ç–∏ —Ä–µ–∫–æ—Ä–¥—ã! üí™",
            getMainKeyboard()
          );
          break;

        case 'how_to_play':
          await sendTelegramMessage(
            chatId,
            "üéÆ *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*\n\n" +
            "‚Ä¢ –ù–∞–∂–∏–º–∞–π –Ω–∞ —ç–∫—Ä–∞–Ω, —á—Ç–æ–±—ã —Å–≤–∏–Ω–∫–∞ –≤–∑–ª–µ—Ç–∞–ª–∞\n" +
            "‚Ä¢ –£–≤–æ—Ä–∞—á–∏–≤–∞–π—Å—è –æ—Ç –∫–∏—Ä–ø–∏—á–Ω—ã—Ö –∫–æ–ª–æ–Ω–Ω\n" +
            "‚Ä¢ –°–æ–±–∏—Ä–∞–π –æ—á–∫–∏ –∏ –ø–æ–±–µ–π —Ä–µ–∫–æ—Ä–¥!\n\n" +
            "üí° *–°–æ–≤–µ—Ç—ã:*\n" +
            "‚Ä¢ –ù–µ –ª–µ—Ç–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ\n" +
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é\n" +
            "‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–ª–æ–Ω–Ω–æ–π",
            getMainKeyboard()
          );
          break;
      }
    }

    return {
      statusCode: 200,
      body: JSON.stringify({ ok: true })
    };
  } catch (error) {
    console.error('Error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: error.message })
    };
  }
}
